# Copyright (C) 2006 International Business Machines and others.
# All Rights Reserved.
# This file is distributed under the Eclipse Public License.

# $Id: Makefile.in 726 2006-04-17 04:16:00Z andreasw $

##########################################################################
#			!! IMPORTANT !!

# Makefile.in is the template used to produce the Makefile for the examples.
# Makefile.in is processed when you run configure.  Variables bracketed by `@'
# characters, e.g., @EXEEXT@, will be replaced with a value that is correct for
# your specific installation and the choices you make when running configure.

# If you write your own main program, or need to customise the Makefile for
# some other reason, modify Makefile.in, not Makefile! Makefile is regenerated
# every time you run configure, and your changes will be lost. If you don't see
# variables like @EXEEXT@ below, you're looking at Makefile. You want
# Makefile.in.

# For those familiar with GNU autotools, who are asking ``What about
# Makefile.am?'', stop looking. Makefile.in is the starting point in the
# example directory. Knowledge of make is all that's required to work with
# Makefile.in, a more reasonable assumption for most users. Have a look at
# test/Makefile.am if you want to start at the autotools level.
##########################################################################

# Blocks prefixed with CHANGEME will probably need some adjustment if you write
# a custom main program.

# As distributed, this makefile will build two sample main programs:
#  * osi_dylp is a bare C driver for dylp; it makes no use of COIN software
#  * odsi+dylp is a driver to exercise dylp via the OsiDylp OSI layer; it
#    uses dylp as you should use it in the context of COIN.
# Have a look at the README for more information about each of them.
#
# If you're customising this file for your own code, choose one of DRIVER_CXX
# or DRIVER_C based on whether the main program is C or C++. The remainder of
# the source files can be any mix of C or C++. (Adding other languages to the
# mix will probably require more extensive modifications.)

# CHANGEME: The name of your main program.

DRIVER_CXX = odsi+dylp
DRIVER_C = osi_dylp

# CHANGEME: This should be the name of your executable. You won't need to edit
# these lines unless you want the final executable to have a name that's
# different from the name you gave for DRIVER_CXX / DRIVER_C just above.

EXE_CXX = $(DRIVER_CXX)@EXEEXT@
EXE_C = $(DRIVER_C)@EXEEXT@

# CHANGEME: OBJS* should specify the files required to build the executable.

OBJS_CXX =  $(DRIVER_CXX).@OBJEXT@

OBJS_C = $(DRIVER_C).@OBJEXT@

# CHANGEME: Additional libraries. You may need additional libraries if you're
# writing a new main program with additional capabilities.

ADDLIBS =

# CHANGEME: Additional flags for compilation (e.g., include flags)

ADDINCFLAGS =

##########################################################################
#  Usually, you don't have to change anything below.  Note that if you   #
#  change certain compiler options, you might have to recompile the      #
#  COIN package.                                                         #
##########################################################################

# Search directory for source files. Necessary for the common case where
# you're building in a separate directory from the source.

VPATH = @srcdir@

# This makefile is using the automake scheme for conditionals. For a condition
# FOO, there will be two variables, FOO_TRUE and FOO_FALSE. If FOO is true,
# FOO_TRUE will be null and FOO_FALSE will be '#' (i.e., the line becomes a
# comment). If FOO is false, FOO_TRUE will be '#' and FOO_FALSE will be null.
# You can see the definitions produced by configure in config.log.

# C++ compiler command
CXX = @CXX@

# Base C++ compiler options
CXXFLAGS = @CXXFLAGS@
CPPFLAGS = @CPPFLAGS@

# additional C++ compiler options for linking
CXXLINKFLAGS = @LDFLAGS@ @RPATH_FLAGS@

# C compiler command
CC = @CC@

# Base C compiler options
CFLAGS = @CFLAGS@

# Include directories and symbol definitions. In the absence of help from
# pkgconfig, go with the flags used for the unit test.

@COIN_HAS_PKGCONFIG_TRUE@INCL = \
  `PKG_CONFIG_PATH=@COIN_PKG_CONFIG_PATH@ @PKG_CONFIG@ --cflags osi-dylp`
@COIN_HAS_PKGCONFIG_FALSE@INCL = @OSIDYLPTEST_CFLAGS@

INCL += $(ADDINCFLAGS)

# Linker flags. As for CFLAGS, in the absence of help from pkgconfig, go
# with the set used for the unit test for osi_dylp. For odsi+dylp, that's
# overkill -- all we should need is OsiDylp itself and CoinUtils.

@COIN_HAS_PKGCONFIG_TRUE@LIBS_DYLP = \
  `PKG_CONFIG_PATH=@COIN_PKG_CONFIG_PATH@ @PKG_CONFIG@ --libs dylp`
@COIN_HAS_PKGCONFIG_TRUE@LIBS_OSIDYLP = \
  `PKG_CONFIG_PATH=@COIN_PKG_CONFIG_PATH@ @PKG_CONFIG@ --libs osi-dylp` \
  -lCoinUtils
@COIN_HAS_PKGCONFIG_FALSE@LIBS_DYLP = \
  -L@abs_lib_dir@ -lDylp @DYLPTEST_LFLAGS@
@COIN_HAS_PKGCONFIG_FALSE@LIBS_OSIDYLP = \
  -L@abs_lib_dir@ -lOsiDylp -lCoinutils

LIBS_DYLP += $(ADDLIBS)
LIBS_OSIDYLP += $(ADDLIBS)

examples: $(EXE_C) $(EXE_CXX)

.SUFFIXES: .cpp .c .@OBJEXT@

$(EXE_C): $(OBJS_C)
	$(CC) $(CXXLINKFLAGS) $(CFLAGS) -o $@ $< $(LIBS_DYLP)

$(EXE_CXX): $(OBJS_CXX)
	$(CXX) $(CXXLINKFLAGS) $(CXXFLAGS) -o $@ $< $(LIBS_OSIDYLP)

# Standard automake clean targets, so that this directory gets properly
# cleaned.

mostlyclean clean: 
	rm -rf $(EXE_CXX) $(EXE_C) $(OBJS_CXX) $(OBJS_C)
	rm -rf *.log *.out

distclean maintainer-clean: clean
	rm -rf Makefile plain

.cpp.@OBJEXT@:
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(INCL) -c -o $@ $<

.c.@OBJEXT@:
	$(CC) $(CPPFLAGS) $(CFLAGS) $(INCL) -c -o $@ $<


